[{"/Users/jag/jag/JUNIVERSE/GIT/JAG-FRONTEND/JAG-REACT/jag-react-table-example/src/index.js":"1","/Users/jag/jag/JUNIVERSE/GIT/JAG-FRONTEND/JAG-REACT/jag-react-table-example/src/reportWebVitals.js":"2","/Users/jag/jag/JUNIVERSE/GIT/JAG-FRONTEND/JAG-REACT/jag-react-table-example/src/examples/JagTable1.js":"3","/Users/jag/jag/JUNIVERSE/GIT/JAG-FRONTEND/JAG-REACT/jag-react-table-example/src/App.js":"4","/Users/jag/jag/JUNIVERSE/GIT/JAG-FRONTEND/JAG-REACT/jag-react-table-example/src/data.js":"5","/Users/jag/jag/JUNIVERSE/GIT/JAG-FRONTEND/JAG-REACT/jag-react-table-example/src/filters/NumberRangeColumnFilter.js":"6","/Users/jag/jag/JUNIVERSE/GIT/JAG-FRONTEND/JAG-REACT/jag-react-table-example/src/filters/SelectColumnFilter.js":"7","/Users/jag/jag/JUNIVERSE/GIT/JAG-FRONTEND/JAG-REACT/jag-react-table-example/src/filters/customFilterTypes.js":"8","/Users/jag/jag/JUNIVERSE/GIT/JAG-FRONTEND/JAG-REACT/jag-react-table-example/src/examples/JagTable2.js":"9","/Users/jag/jag/JUNIVERSE/GIT/JAG-FRONTEND/JAG-REACT/jag-react-table-example/src/components/CheckboxSelection.js":"10","/Users/jag/jag/JUNIVERSE/GIT/JAG-FRONTEND/JAG-REACT/jag-react-table-example/src/examples/JagTable3.js":"11","/Users/jag/jag/JUNIVERSE/GIT/JAG-FRONTEND/JAG-REACT/jag-react-table-example/src/examples/JagTable4.js":"12","/Users/jag/jag/JUNIVERSE/GIT/JAG-FRONTEND/JAG-REACT/jag-react-table-example/src/Styles.js":"13","/Users/jag/jag/JUNIVERSE/GIT/JAG-FRONTEND/JAG-REACT/jag-react-table-example/src/components/GlobalSearchFilter.js":"14"},{"size":500,"mtime":1608548282182,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1608547427832,"results":"17","hashOfConfig":"16"},{"size":7593,"mtime":1608558009775,"results":"18","hashOfConfig":"16"},{"size":486,"mtime":1608569103119,"results":"19","hashOfConfig":"16"},{"size":193,"mtime":1608553503167,"results":"20","hashOfConfig":"16"},{"size":1550,"mtime":1608548783452,"results":"21","hashOfConfig":"16"},{"size":849,"mtime":1608549006395,"results":"22","hashOfConfig":"16"},{"size":862,"mtime":1608549661576,"results":"23","hashOfConfig":"16"},{"size":8876,"mtime":1608558024869,"results":"24","hashOfConfig":"16"},{"size":1317,"mtime":1608551710573,"results":"25","hashOfConfig":"16"},{"size":8978,"mtime":1608558036948,"results":"26","hashOfConfig":"16"},{"size":9326,"mtime":1608569132263,"results":"27","hashOfConfig":"16"},{"size":756,"mtime":1608568954629,"results":"28","hashOfConfig":"16"},{"size":706,"mtime":1608569135585,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7w60ns",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jag/jag/JUNIVERSE/GIT/JAG-FRONTEND/JAG-REACT/jag-react-table-example/src/index.js",[],"/Users/jag/jag/JUNIVERSE/GIT/JAG-FRONTEND/JAG-REACT/jag-react-table-example/src/reportWebVitals.js",[],"/Users/jag/jag/JUNIVERSE/GIT/JAG-FRONTEND/JAG-REACT/jag-react-table-example/src/examples/JagTable1.js",["59","60"],"/Users/jag/jag/JUNIVERSE/GIT/JAG-FRONTEND/JAG-REACT/jag-react-table-example/src/App.js",["61","62","63","64"],"/Users/jag/jag/JUNIVERSE/GIT/JAG-FRONTEND/JAG-REACT/jag-react-table-example/src/data.js",[],"/Users/jag/jag/JUNIVERSE/GIT/JAG-FRONTEND/JAG-REACT/jag-react-table-example/src/filters/NumberRangeColumnFilter.js",[],"/Users/jag/jag/JUNIVERSE/GIT/JAG-FRONTEND/JAG-REACT/jag-react-table-example/src/filters/SelectColumnFilter.js",[],"/Users/jag/jag/JUNIVERSE/GIT/JAG-FRONTEND/JAG-REACT/jag-react-table-example/src/filters/customFilterTypes.js",["65"],"/Users/jag/jag/JUNIVERSE/GIT/JAG-FRONTEND/JAG-REACT/jag-react-table-example/src/examples/JagTable2.js",["66"],"/Users/jag/jag/JUNIVERSE/GIT/JAG-FRONTEND/JAG-REACT/jag-react-table-example/src/components/CheckboxSelection.js",[],"/Users/jag/jag/JUNIVERSE/GIT/JAG-FRONTEND/JAG-REACT/jag-react-table-example/src/examples/JagTable3.js",["67"],"import React from \"react\";\n\nimport {\n  useTable,\n  usePagination,\n  useSortBy,\n  useFilters,\n  useGroupBy,\n  useExpanded,\n  useRowSelect,\n} from \"react-table\";\n\nimport { tableData } from \"../data\";\nimport customFilterTypes from \"../filters/customFilterTypes\";\nimport NumberRangeColumnFilter from \"../filters/NumberRangeColumnFilter\";\nimport SelectColumnFilter from \"../filters/SelectColumnFilter\";\nimport DefaultColumnFilter from \"../filters/DefaultColumnFilter\";\nimport EditableCell from \"../components/EditableCell\";\nimport { useCheckboxSelection } from \"../components/CheckboxSelection\";\nimport Pagination from \"../components/Pagination\";\n\nimport Styles from \"../Styles\";\n\nconst defaultColumnConfig = () => ({\n  Filter: DefaultColumnFilter,\n  Cell: EditableCell,\n});\n\n// Be sure to pass our updateMyData and the skipReset option\nfunction Table({\n  columns,\n  data,\n  updateMyData,\n  skipReset,\n  filterTypes,\n  defaultColumn,\n}) {\n  // Use the state and functions returned from useTable to build your UI\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page, // Instead of using 'rows', we'll use page,\n    // which has only the rows for the active page\n\n    // The rest of these things are super handy, too ;)\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: {\n      pageIndex,\n      pageSize,\n      sortBy,\n      groupBy,\n      expanded,\n      filters,\n      selectedRowIds,\n    },\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n      filterTypes,\n      // updateMyData isn't part of the API, but anything we put into these options will automatically be available on the instance.\n      // That way we can call this function from our cell renderer!\n      updateMyData,\n      // We also need to pass this so the page doesn't change\n      // when we edit the data.\n      autoResetPage: !skipReset,\n      autoResetSelectedRows: !skipReset,\n      disableMultiSort: true,\n    },\n    useFilters,\n    useGroupBy,\n    useSortBy,\n    useExpanded,\n    usePagination,\n    useRowSelect,\n    // Here we will use a plugin to add our selection column\n    useCheckboxSelection\n  );\n\n  // Render the UI for your table\n  return (\n    <>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <th {...column.getHeaderProps()}>\n                  <div>\n                    {column.canGroupBy ? (\n                      // If the column can be grouped, let's add a toggle\n                      <span {...column.getGroupByToggleProps()}>\n                        {column.isGrouped ? \"ðŸ›‘ \" : \"ðŸ‘Š \"}\n                      </span>\n                    ) : null}\n\n                    <span {...column.getSortByToggleProps()}>\n                      {column.render(\"Header\")}\n                      {/* Add a sort direction indicator */}\n                      {column.isSorted\n                        ? column.isSortedDesc\n                          ? \" ðŸ”½\"\n                          : \" ðŸ”¼\"\n                        : \"\"}\n                    </span>\n                  </div>\n                  {/* Render the columns filter UI */}\n                  <div>{column.canFilter ? column.render(\"Filter\") : null}</div>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map((row) => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map((cell) => {\n                  return (\n                    <td {...cell.getCellProps()}>\n                      {cell.isGrouped ? (\n                        // If it's a grouped cell, add an expander and row count\n                        <>\n                          <span {...row.getToggleRowExpandedProps()}>\n                            {row.isExpanded ? \"ðŸ‘‡\" : \"ðŸ‘‰\"}\n                          </span>{\" \"}\n                          {cell.render(\"Cell\", { editable: false })} (\n                          {row.subRows.length})\n                        </>\n                      ) : cell.isAggregated ? (\n                        // If the cell is aggregated, use the Aggregated\n                        // renderer for cell\n                        cell.render(\"Aggregated\")\n                      ) : cell.isPlaceholder ? null : ( // For cells with repeated values, render null\n                        // Otherwise, just render the regular cell\n                        cell.render(\"Cell\", { editable: true })\n                      )}\n                    </td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      {/*\n        Pagination can be built however you'd like.\n        This is just a very basic UI implementation:\n      */}\n      <Pagination\n        pageSize={pageSize}\n        setPageSize={setPageSize}\n        pageIndex={pageIndex}\n        pageCount={pageCount}\n        pageOptions={pageOptions}\n        nextPage={nextPage}\n        previousPage={previousPage}\n        canNextPage={canNextPage}\n        canPreviousPage={canPreviousPage}\n        gotoPage={gotoPage}\n      />\n      <pre>\n        <code>\n          {JSON.stringify(\n            {\n              pageIndex,\n              pageSize,\n              pageCount,\n              canNextPage,\n              canPreviousPage,\n              sortBy,\n              groupBy,\n              expanded: expanded,\n              filters,\n              selectedRowIds: selectedRowIds,\n            },\n            null,\n            2\n          )}\n        </code>\n      </pre>\n    </>\n  );\n}\n\n// Define a custom filter filter function!\nfunction filterGreaterThan(rows, id, filterValue) {\n  return rows.filter((row) => {\n    const rowValue = row.values[id];\n    return rowValue >= filterValue;\n  });\n}\n\n// This is an autoRemove method on the filter function that\n// when given the new filter value and returns true, the filter\n// will be automatically removed. Normally this is just an undefined\n// check, but here, we want to remove the filter if it's not a number\nfilterGreaterThan.autoRemove = (val) => typeof val !== \"number\";\n\n// This is a custom aggregator that\n// takes in an array of leaf values and\n// returns the rounded median\nfunction roundedMedian(leafValues) {\n  let min = leafValues[0] || 0;\n  let max = leafValues[0] || 0;\n\n  leafValues.forEach((value) => {\n    min = Math.min(min, value);\n    max = Math.max(max, value);\n  });\n\n  return Math.round((min + max) / 2);\n}\n\nconst tableCols = [\n  {\n    Header: \"Id\",\n    accessor: \"id\",\n  },\n  {\n    Header: \"Name\",\n    accessor: \"name\",\n  },\n\n  {\n    Header: \"Prop1\",\n    accessor: \"prop1\",\n    Filter: NumberRangeColumnFilter,\n    filter: \"between\",\n  },\n\n  {\n    Header: \"Prop2 & Prop3\",\n    columns: [\n      {\n        Header: \"Prop2\",\n        accessor: \"prop2\",\n      },\n      {\n        Header: \"Prop3\",\n        accessor: \"prop3\",\n        Filter: SelectColumnFilter,\n        filter: \"includes\",\n      },\n    ],\n  },\n];\n\nfunction App() {\n  const columns = React.useMemo(() => tableCols, []);\n  const filterTypes = React.useMemo(customFilterTypes, []);\n  const defaultColumn = React.useMemo(defaultColumnConfig, []);\n\n  console.log({ tableData });\n  const [data, setData] = React.useState(() => tableData);\n  const [originalData] = React.useState(data);\n\n  // We need to keep the table from resetting the pageIndex when we\n  // Update data. So we can keep track of that flag with a ref.\n  const skipResetRef = React.useRef(false);\n\n  // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n  const updateMyData = (rowIndex, columnId, value) => {\n    // We also turn on the flag to not reset the page\n    skipResetRef.current = true;\n    setData((old) =>\n      old.map((row, index) => {\n        if (index === rowIndex) {\n          return {\n            ...row,\n            [columnId]: value,\n          };\n        }\n        return row;\n      })\n    );\n  };\n\n  // After data changes, we turn the flag back off\n  // so that if data actually changes when we're not\n  // editing it, the page is reset\n  React.useEffect(() => {\n    skipResetRef.current = false;\n  }, [data]);\n\n  // Let's add a data resetter/randomizer to help\n  // illustrate that flow...\n  const resetData = () => {\n    // Don't reset the page when we do this\n    skipResetRef.current = true;\n    setData(originalData);\n  };\n\n  return (\n    <Styles>\n      <button onClick={resetData}>Reset Data</button>\n      <Table\n        columns={columns}\n        data={data}\n        updateMyData={updateMyData}\n        skipReset={skipResetRef.current}\n        filterTypes={filterTypes}\n        defaultColumn={defaultColumn}\n      />\n    </Styles>\n  );\n}\n\nexport default App;\n","/Users/jag/jag/JUNIVERSE/GIT/JAG-FRONTEND/JAG-REACT/jag-react-table-example/src/examples/JagTable4.js",["68"],"/Users/jag/jag/JUNIVERSE/GIT/JAG-FRONTEND/JAG-REACT/jag-react-table-example/src/Styles.js",["69"],"/Users/jag/jag/JUNIVERSE/GIT/JAG-FRONTEND/JAG-REACT/jag-react-table-example/src/components/GlobalSearchFilter.js",[],{"ruleId":"70","severity":1,"message":"71","line":12,"column":21,"nodeType":"72","messageId":"73","endLine":12,"endColumn":31},{"ruleId":"70","severity":1,"message":"74","line":180,"column":10,"nodeType":"72","messageId":"73","endLine":180,"endColumn":23},{"ruleId":"70","severity":1,"message":"75","line":2,"column":8,"nodeType":"72","messageId":"73","endLine":2,"endColumn":12},{"ruleId":"70","severity":1,"message":"76","line":5,"column":8,"nodeType":"72","messageId":"73","endLine":5,"endColumn":17},{"ruleId":"70","severity":1,"message":"77","line":6,"column":8,"nodeType":"72","messageId":"73","endLine":6,"endColumn":17},{"ruleId":"70","severity":1,"message":"78","line":7,"column":8,"nodeType":"72","messageId":"73","endLine":7,"endColumn":17},{"ruleId":"70","severity":1,"message":"79","line":1,"column":8,"nodeType":"72","messageId":"73","endLine":1,"endColumn":13},{"ruleId":"70","severity":1,"message":"74","line":214,"column":10,"nodeType":"72","messageId":"73","endLine":214,"endColumn":23},{"ruleId":"70","severity":1,"message":"74","line":214,"column":10,"nodeType":"72","messageId":"73","endLine":214,"endColumn":23},{"ruleId":"70","severity":1,"message":"74","line":225,"column":10,"nodeType":"72","messageId":"73","endLine":225,"endColumn":23},{"ruleId":"70","severity":1,"message":"79","line":1,"column":8,"nodeType":"72","messageId":"73","endLine":1,"endColumn":13},"no-unused-vars","'tableData1' is defined but never used.","Identifier","unusedVar","'roundedMedian' is defined but never used.","'logo' is defined but never used.","'JagTable1' is defined but never used.","'JagTable2' is defined but never used.","'JagTable3' is defined but never used.","'React' is defined but never used."]